# Copyright Bruno Dutra 2017-2018
# Distributed under the Boost Software License, Version 1.0.
# See accompanying file LICENSE.txt or copy at http://boost.org/LICENSE_1_0.txt

sudo: required
language: cpp

git:
    depth: 1

env:
    global:
      - secure: "juqIG3Tfvas+ohx+o2KM6O4YnayNyye+w591fGJsE2uNkjBivIHntyFqZakdVeE8phsRAjChDD7YThYuIHblp8sAz0ydBJf2MOfJ77PH19I+2svg3skXOBNf6UtzQtAB5cvq/t4CXHeAgJjFLfNdYt2irc2nISGw+IpSz8CpS7hxdAluyTFJob/mhbz7AcRzYwZyuj0d3qTELL5TaL2SZ6WMgnTMaxhLdbh0wlhsFD1kkpzQsCajifmIK0z84CYk7tNBOvy5xPdZHIBvwzmXcL56QHAexJrKooyhkPDRu6jzexCTmd5t4PFDTVSHEzSulrOtUKd2PxrZxAjsJ3o75G8p7Mh3/F6UEhcGzcx05MIPWS7T3SDZAVxwLSLpW7PAivQQAMtTzwo5AyVbAU1uHnvN/59oldcI53CNWnviADEscA52n3r5/5UHuyJ02q4viGIzV1kV1dtVcPx7Lp8VIlzLhCPs7IsGw+Vlrt9KLF9GssW7NqnBWZsuQdwGPQMs9fV8CePFB1LJZMxC0ybAeL18+fSuvgGjGSp3lqMbLyBh9sPCrLVdPriYRV+6pvGdtb6mMgs3W9KQEM9wYZGsuzqrBh5bovQ7YMb80SqRCeb4WFCaj7jkMCkvPQBOuQ+obKYtqD1teJzOiYcPP7IwBlhVqK9lxeQGCCa2SHdRjaw="
      - VERSION=7

addons:
    apt:
        packages: &pkgs
          - tree
          - g++-7
          - clang-5.0
          - clang-format-5.0
        sources: &srcs
          - ubuntu-toolchain-r-test
          - llvm-toolchain-trusty-5.0

jobs:
    include:
      - os: linux
        dist: trusty
        stage: test
        compiler: g++
        env: VERSION=7

      - os: linux
        dist: trusty
        stage: test
        compiler: clang++
        env: VERSION=5.0

      - os: linux
        dist: trusty
        stage: test
        env: CHECK_FORMATTING=true

      - os: linux
        dist: trusty
        stage: deploy
        script: cmake --build "${BUILD_PATH}" --target install && tree "${INSTALL_PATH}"
        deploy:
            provider: pages
            target-branch: standalone
            github-token: $GITHUB_TOKEN
            skip-cleanup: true
            keep-history: true
            allow-empty-commit: true
            local-dir: install/include
            on:
                branch: master

before_install:
  - SOURCE_PATH="${TRAVIS_BUILD_DIR}"

  - BUILD_PATH="${TRAVIS_BUILD_DIR}/build"
  - mkdir -p "${BUILD_PATH}"

  - INSTALL_PATH="${TRAVIS_BUILD_DIR}/install"
  - mkdir -p "${INSTALL_PATH}"

  - DEPS_PATH="${TRAVIS_BUILD_DIR}/deps"
  - mkdir -p "${DEPS_PATH}"

  - GITHUB_PATH="${TRAVIS_BUILD_DIR}/github"
  - mkdir -p "${GITHUB_PATH}"

  - export CXXFLAGS="${CXXFLAGS} -fsanitize=address,undefined"

  - |
    if [[ "${CXX}" == "g++" ]]
    then
        export CXXFLAGS="${CXXFLAGS} -fuse-ld=gold"
    fi

  - |
    if [[ -n "${VERSION}" ]]
    then
        export CC="${CC}-${VERSION}"
        export CXX="${CXX}-${VERSION}"
    fi

install:
  # libc++
  - |
    if [[ ${CC} == clang* && ${CXX} == clang++* ]]
    then
        git clone --depth 1 http://llvm.org/git/llvm.git "${DEPS_PATH}/llvm" || exit $?
        git clone --depth 1 http://llvm.org/git/libcxx.git "${DEPS_PATH}/llvm/projects/libcxx" || exit $?
        git clone --depth 1 http://llvm.org/git/libcxxabi.git "${DEPS_PATH}/llvm/projects/libcxxabi" || exit $?

        LLVM_CMAKE_ARGS+=(-H"${DEPS_PATH}/llvm")
        LLVM_CMAKE_ARGS+=(-B"${DEPS_PATH}/llvm/build")
        LLVM_CMAKE_ARGS+=(-DCMAKE_INSTALL_PREFIX="${DEPS_PATH}/llvm/install")
        LLVM_CMAKE_ARGS+=(-DLLVM_USE_SANITIZER="Undefined;Address")

        CFLAGS="" CXXFLAGS="" LDFLAGS="" cmake ${LLVM_CMAKE_ARGS[@]} || exit $?
        make -C "${DEPS_PATH}/llvm/build" -j install-cxx install-cxxabi || exit $?

        export CXXFLAGS="${CXXFLAGS} -stdlib=libc++ -nostdinc++ -isystem ${DEPS_PATH}/llvm/install/include/c++/v1"
        export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:${DEPS_PATH}/llvm/install/lib"
        export LDFLAGS="${LDFLAGS} -L${DEPS_PATH}/llvm/install/lib"
    fi

before_script:
  - CMAKE_ARGS+=("-H${SOURCE_PATH}")
  - CMAKE_ARGS+=("-B${BUILD_PATH}")
  - CMAKE_ARGS+=("-DCMAKE_INSTALL_PREFIX=${INSTALL_PATH}")

  - |
    if [[ "${CHECK_FORMATTING}" == "true" ]]
    then
        CMAKE_ARGS+=("-DCLANG_FORMAT=/usr/bin/clang-format-5.0")
    fi

  - cmake ${CMAKE_ARGS[@]}

script:
  - |
    if [[ "${CHECK_FORMATTING}" == "true" ]]
    then
        (cd "${BUILD_PATH}" && ctest --output-on-failure -R ^test.format)
    else
        (cd "${BUILD_PATH}" && ctest --output-on-failure -E ^test.format)
    fi

notifications:
  webhooks:
    urls: https://webhooks.gitter.im/e/f6f076c43196d662f905
    on_success: change
    on_failure: always
