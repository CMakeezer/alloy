# Copyright Bruno Dutra 2017
# Distributed under the Boost Software License, Version 1.0.
# See accompanying file LICENSE.txt or copy at http://boost.org/LICENSE_1_0.txt

sudo: required
language: cpp

git:
    depth: 1

env:
    global:
      - secure: "juqIG3Tfvas+ohx+o2KM6O4YnayNyye+w591fGJsE2uNkjBivIHntyFqZakdVeE8phsRAjChDD7YThYuIHblp8sAz0ydBJf2MOfJ77PH19I+2svg3skXOBNf6UtzQtAB5cvq/t4CXHeAgJjFLfNdYt2irc2nISGw+IpSz8CpS7hxdAluyTFJob/mhbz7AcRzYwZyuj0d3qTELL5TaL2SZ6WMgnTMaxhLdbh0wlhsFD1kkpzQsCajifmIK0z84CYk7tNBOvy5xPdZHIBvwzmXcL56QHAexJrKooyhkPDRu6jzexCTmd5t4PFDTVSHEzSulrOtUKd2PxrZxAjsJ3o75G8p7Mh3/F6UEhcGzcx05MIPWS7T3SDZAVxwLSLpW7PAivQQAMtTzwo5AyVbAU1uHnvN/59oldcI53CNWnviADEscA52n3r5/5UHuyJ02q4viGIzV1kV1dtVcPx7Lp8VIlzLhCPs7IsGw+Vlrt9KLF9GssW7NqnBWZsuQdwGPQMs9fV8CePFB1LJZMxC0ybAeL18+fSuvgGjGSp3lqMbLyBh9sPCrLVdPriYRV+6pvGdtb6mMgs3W9KQEM9wYZGsuzqrBh5bovQ7YMb80SqRCeb4WFCaj7jkMCkvPQBOuQ+obKYtqD1teJzOiYcPP7IwBlhVqK9lxeQGCCa2SHdRjaw="
      - CLANG_FORMAT=/usr/bin/clang-format-5.0
      - VERSION=7

addons:
    apt:
        packages: &pkgs
          - g++-7
        sources: &srcs
          - ubuntu-toolchain-r-test

matrix:
    include:
      - os: linux
        dist: trusty
        env: DEPLOY=true
        addons:
            apt:
                packages:
                  - *pkgs
                  - tree
                sources: *srcs

      - os: linux
        dist: trusty
        env: CHECK_FORMATTING=true
        addons:
            apt:
                packages:
                  - *pkgs
                  - clang-format-5.0
                sources:
                  - *srcs
                  - sourceline: 'deb http://apt.llvm.org/trusty/ llvm-toolchain-trusty main'
                    key_url: 'http://apt.llvm.org/llvm-snapshot.gpg.key'

      - os: linux
        dist: trusty
        compiler: g++
        env: VERSION=7

      - os: linux
        dist: trusty
        compiler: clang++
        env: VERSION=5.0
        addons:
            apt:
                packages:
                  - *pkgs
                  - clang-5.0
                sources:
                  - *srcs
                  - sourceline: 'deb http://apt.llvm.org/trusty/ llvm-toolchain-trusty main'
                    key_url: 'http://apt.llvm.org/llvm-snapshot.gpg.key'

before_install:
  - git config --global user.name "Travis Bot"
  - git config --global user.email "\<\>"

  - ALLOY_SOURCE_PATH="${TRAVIS_BUILD_DIR}"

  - ALLOY_BUILD_PATH="${TRAVIS_BUILD_DIR}/build"
  - mkdir -p "${ALLOY_BUILD_PATH}"

  - DEPS_PATH="${TRAVIS_BUILD_DIR}/deps"
  - mkdir -p "${DEPS_PATH}"

  - GITHUB_PATH="${TRAVIS_BUILD_DIR}/github"
  - mkdir -p "${GITHUB_PATH}"

  - |
    if [[ -n "${CC}" && -n "${VERSION}" ]]
    then
        export CC="${CC}-${VERSION}"
    fi

  - |
    if [[ -n "${CXX}" && -n "${VERSION}" ]]
    then
        export CXX="${CXX}-${VERSION}"
    fi

install:
  - |
    if [[ "${TRAVIS_OS_NAME}" == "linux" ]]
    then
        CMAKE_URL="http://www.cmake.org/files/v3.8/cmake-3.8.0-Linux-x86_64.tar.gz"
        mkdir -p "${DEPS_PATH}/cmake"
        travis_retry curl -L "${CMAKE_URL}" | tar --strip-components=1 -xz -C "${DEPS_PATH}/cmake" || exit 1
        export PATH=${DEPS_PATH}/cmake/bin:${PATH}
    fi

  - |
    if [[ ${CC} == clang* ]] && [[ ${CXX} == clang++* ]]
    then
        git clone --depth 1 http://llvm.org/git/llvm.git "${DEPS_PATH}/llvm" || exit 1
        git clone --depth 1 http://llvm.org/git/libcxx.git "${DEPS_PATH}/llvm/projects/libcxx" || exit 2
        git clone --depth 1 http://llvm.org/git/libcxxabi.git "${DEPS_PATH}/llvm/projects/libcxxabi" || exit 3
        (mkdir "${DEPS_PATH}/llvm/build" && cd "${DEPS_PATH}/llvm/build" && cmake ..) || exit 4
        (cd "${DEPS_PATH}/llvm/build" && sudo make -j install-cxx install-cxxabi) || exit 5
        export CXXFLAGS="-nostdinc++ -isystem /usr/local/include/c++/v1"
        export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:/usr/local/lib"
        export LDFLAGS="-L/usr/local/lib"
    fi

before_script:
  - CMAKE_ARGS=("${ALLOY_SOURCE_PATH}")

  - |
    if [[ "${CHECK_FORMATTING}" == "true" ]]
    then
        CMAKE_ARGS+=("-DCLANG_FORMAT=${CLANG_FORMAT}")
    fi

  - (cd "${ALLOY_BUILD_PATH}" && cmake ${CMAKE_ARGS[@]})

  - |
    function publish {
        git clone https://brunocodutra:${GITHUB_TOKEN}@github.com/brunocodutra/alloy -q --depth 1 --branch=$2 "${GITHUB_PATH}/$2" &> /dev/null || return 1
        cp -r "${GITHUB_PATH}/$2/.git/" $1                                                                                        &> /dev/null || return 2
        git -C $1 add --all .                                                                                                     &> /dev/null || return 3
        git -C $1 commit --allow-empty -m "update to $(git -C ${ALLOY_SOURCE_PATH} rev-parse --short HEAD)"                       &> /dev/null || return 4
        git -C $1 push origin $2                                                                                                  &> /dev/null || return 5
    }

script:
  - |
    if [[ "${DEPLOY}" == "true" ]]
    then
        cmake --build "${ALLOY_BUILD_PATH}" --target deploy && tree "${ALLOY_BUILD_PATH}/dist/" || exit 1
        if [[ "${TRAVIS_BRANCH}" == "master" && "${TRAVIS_PULL_REQUEST}" == "false" ]]
        then
            publish "${ALLOY_BUILD_PATH}/dist/include/" standalone || exit $?
        fi
    elif [[ "${CHECK_FORMATTING}" == "true" ]]
    then
        (cd "${ALLOY_BUILD_PATH}" && ctest --output-on-failure -R ^test.format)
    else
        (cd "${ALLOY_BUILD_PATH}" && ctest --output-on-failure -E ^test.format)
    fi

notifications:
  webhooks:
    urls: https://webhooks.gitter.im/e/f6f076c43196d662f905
    on_success: change
    on_failure: always
